#!/bin/bash
#
# Beginning - an init system that isn't smarter than you
#
# Copyright (c) 2015 Kylie McClain <somasis@exherbo.org>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

umask 022

export PATH="@@bindir@@"

BEGINNING_PLATFORM=$(uname -s)

LIBEXECDIR="@@libexecdir@@"
LIBDIR="@@libdir@@"
SYSCONFDIR="@@sysconfdir@@"

BEGINNING_LIB="${LIBDIR}"/beginning
BEGINNING_LIBEXEC="${LIBEXECDIR}"/beginning
BEGINNING_RC="${BEGINNING_LIB}"/rc.d
USER_RC="${SYSCONFDIR}"/rc.d

[[ -r "${BEGINNING_LIB}"/rc.conf ]] && . "${BEGINNING_LIB}"/rc.conf
[[ -r "${SYSCONFDIR}"/rc.conf ]]    && . "${SYSCONFDIR}"/rc.conf
# os-release contains things such as distro name, distro's 'color'...
[[ -r "${LIBDIR}"/os-release ]]     && . "${LIBDIR}"/os-release
[[ -r "${SYSCONFDIR}"/os-release ]] && . "${SYSCONFDIR}"/os-release

if [[ -d "${BEGINNING_LIB}"/rc.conf.d ]];then
    for file in "${BEGINNING_LIB}"/rc.conf.d/*;do
        . "${file}"
    done
    file=
fi
if [[ -d "${SYSCONFDIR}"/rc.conf.d ]];then
    for file in "${SYSCONFDIR}"/rc.conf.d/*;do
        . "${file}"
    done
    file=
fi

if [[ ! -r "${BEGINNING_LIB}"/rc.conf && ! -f "${SYSCONFDIR}"/rc.conf ]];then
    printf 'Could not read/find %s/rc.conf or %s/rc.conf, going into emergency shell...\n' "${BEGINNING_LIB}" "${SYSCONFDIR}"
    emergency_shell
fi

# If os-release gives us a color, use it; if not, use the reset color code
ANSI_COLOR="\e[${ANSI_COLOR:-0}m"
[[ -z "$PRETTY_NAME" ]] && PRETTY_NAME="${NAME:-$BEGINNING_PLATFORM}"

status() {
    local bold='\e[1m'
    local fg_black='\e[30m'
    local fg_red='\e[31m'
    local fg_green='\e[32m'
    local fg_white='\e[37m'
    local bg_black='\e[40m'
    local bg_red='\e[41m'
    local bg_green='\e[42m'
    local bg_white='\e[47m'
    local reset='\e[0m'
    local stat="${1^^}"
    STATUS_SUCCESS="${bold}${fg_white}${bg_green}"
    STATUS_STARTED=${STATUS_SUCCESS}
    STATUS_FAILURE="${bold}${fg_white}${bg_red}"
    STATUS_STOPPED=${STATUS_FAILURE}
    STATUS_UNKNOWN="${bold}${fg_white}${bg_black}"
    STATUS_NOTHING=${STATUS_UNKNOWN}
    STATUS_CUSTOM=${STATUS_UNKNOWN}
    shift

    case "${stat}" in
        STARTED)    printf "\e[2K\r${STATUS_STARTED}[ ${stat} ]${reset} %s\n" "$@${BEGINNING_STARTED:+: ${BEGINNING_STARTED}}"   ;; # green bg   [white]
        SUCCESS)    printf "\e[2K\r${STATUS_SUCCESS}[ ${stat} ]${reset} %s\n" "$@${BEGINNING_SUCCESS:+: ${BEGINNING_SUCCESS}}"   ;; # green bg   [white]
        FAILURE)    printf "\e[2K\r${STATUS_FAILURE}[ ${stat} ]${reset} %s\n" "$@${BEGINNING_FAILURE:+: ${BEGINNING_FAILURE}}"   ;; # red bg     [white]
        STOPPED)    printf "\e[2K\r${STATUS_STOPPED}[ ${stat} ]${reset} %s\n" "$@${BEGINNING_STOPPED:+: ${BEGINNING_STOPPED}}"   ;; # red bg     [white]
        UNKNOWN)    printf "\e[2K\r${STATUS_UNKNOWN}[ ${stat} ]${reset} %s\n" "$@${BEGINNING_UNKNOWN:+: ${BEGINNING_UNKNOWN}}"   ;; # black bg   [white]
        NOTHING)    printf "\e[2K\r${STATUS_NOTHING}[         ]${reset} %s"   "$@${BEGINNING_NOTHING:+: ${BEGINNING_NOTHING}}"   ;; # black bg   [white]
        CUSTOM)     printf  "\e[2K\r${STATUS_CUSTOM}[         ]${reset} %s"   "$@${BEGINNING_CUSTOM:+: ${BEGINNING_CUSTOM}}"     ;; # black bg   [white]
    esac
}

emergency_shell() {
    while true;do
        setsid sulogin && exec "$@"
    done
}

reverse() {
    if [[ $# -ne 0 ]];then
        local rev="$1"
        shift
        reverse "$@"
        printf '%s\n' "$rev"
    fi
}

func_exists() {
    local func err
    for func in $@;do
        type -t "${func}" >/dev/null 2>&1
        err=$?
        [[ "${err}" -eq 0 ]] || break
    done
    [[ "${err}" -eq 0 ]] || return $?
}

prog_exists() {
    local prog err
    for prog in $@;do
        type -fPt "${prog}" >/dev/null 2>&1
        err=$?
        [[ "${err}" -eq 0 ]] || break
    done
    [[ "${err}" -eq 0 ]] || return $?
}

beginning_daemon_load() {
    local daemon file
    for daemon in $@;do
        file=$(beginning_daemon_file "${daemon}" 2>/dev/null)
        if [[ "${file}" ]];then
            . "${file}" >/dev/null 2>&1 || printf "%s: invalid script. possible syntax errors?\n" "${daemon}" >&2 && return 4
        else
            printf "%s: script not found.\n" "${daemon}" >&2
            return 3
        fi
    done
}

beginning_daemon_file() {
    local daemon
    for daemon in $@;do
        if [[ -f "${USER_RC}/${daemon}" ]];then
            echo "${USER_RC}/${daemon}"
        elif [[ -f "${BEGINNING_RC}/${daemon}" ]];then
            echo "${BEGINNING_RC}/${daemon}"
        else
            return 1
        fi
    done
}

beginning_daemon_list() {
    local daemon daes=() list="${1}"
    if [[ "$#" -gt 1 ]];then
        shift
        daes=( "$@" )
    else
        daes=( ${BEGINNING_RC}/* ${USER_RC}/* )
    fi
    for daemon in "${daes[@]}";do
        daemon=${daemon##*/}
        [[ "${daemon}" == '*' ]] && continue
        beginning_daemon_load "${daemon}" 2>/dev/null
        case "${list^^}" in
            STARTED)
                if func_exists ${daemon}_status && ${daemon}_exists && ${daemon}_status;then
                    echo "${daemon}"
                fi
            ;;
            STOPPED)
                if func_exists ${daemon}_status && ${daemon}_exists && ! ${daemon}_status;then
                    echo ${daemon}
                fi
            ;;
            NONEXISTENT)
                if func_exists ${daemon}_exists && ! ${daemon}_exists;then
                    echo ${daemon}
                fi
            ;;
            EXISTENT)
                if func_exists ${daemon}_exists && ${daemon}_exists;then
                    echo ${daemon}
                fi
            ;;
            DAEMONS)
                if ! func_exists ${daemon}_virtual;then
                    echo ${daemon}
                fi
            ;;
            VIRTUALS)
                if func_exists ${daemon}_virtual;then
                    echo ${daemon}
                fi
            ;;
            ALL)
                echo ${daemon}
            ;;
        esac
    done
}

beginning_daemon_provider() {
    local action="${1}"
    local daemon="${2}"
    local type="${3:-installed}"

    d_list=
    d_list=(
        $(for d in $(beginning_daemon_list all);do
            beginning_daemon_load "$d"
            if func_exists ${d##*/}_exists && ! ${d##*/}_exists;then
                [[ "${type}" == "installed" ]] && continue
                if [[ " $(func_exists ${d##*/}_provides && ${d##*/}_provides) " == *" ${daemon} "* ]];then
                    echo "${d##*/}"
                fi
            elif func_exists ${d##*/}_exists && ${d##*/}_exists;then
                if [[ " $(func_exists ${d##*/}_provides && ${d##*/}_provides) " == *" ${daemon} "* ]];then
                    echo "${d##*/}"
                fi
            fi
        done 2>/dev/null)
    )
    [[ "${BEGINNING_PROVIDER_LIST_ONLY}" ]] && echo "${d_list[*]}" && return 0
    local provider=
    local provider=${daemon^^}_PROVIDER
    local provider=${!provider}
    if [[ -z ${d_list[*]} ]];then
        status FAILURE "${daemon}: has no providers. You need to install one."
        return 3
    fi

    if [[ -n "${provider}" && " ${d_list[@]} " == *" ${provider} "* ]];then
        d_list=( "${provider}" )
    elif [[ -n "${provider}" && " ${d_list[@]} " != *" ${provider} "* ]];then
        status FAILURE "${daemon}: invalid provider. Possible providers: ${d_list[*]}"
        return 1
    elif [[ -z "${provider}" && -n "${d_list[@]}" ]];then
        status FAILURE "${daemon}: provider is not set. Possible providers: ${d_list[*]}"
        return 2
    fi
    if [[ -n ${d_list} ]];then # space removal intentional
        beginning_daemon_${action} "${d_list}"; return $?
    fi
}

beginning_daemon_start() {
    export BEGINNING_PHASE=start
    local daemon
    for daemon in ${@};do
        beginning_daemon_load "${daemon}"
        if func_exists ${daemon}_virtual && ${daemon}_virtual;then
            beginning_daemon_provider start "${daemon}"; continue
        fi
        if func_exists ${daemon}_exists && ${daemon}_exists;then
            true
        else
            continue
        fi
        if func_exists ${daemon}_status;then
            if ! ${daemon}_status;then
                if [[ -z "$BEGINNING_NO_RESOLVE_DEPENDS" ]];then
                    BEGINNING_RESOLVING_DEPS=true
                    func_exists ${daemon}_depends && beginning_daemon_start $(${daemon}_depends)
                    BEGINNING_RESOLVING_DEPS=
                fi
                if func_exists ${daemon}_wants;then
                    BEGINNING_RESOLVING_DEPS=true
                    beginning_daemon_start $(${daemon}_wants) || true
                    BEGINNING_RESOLVING_DEPS=
                fi
                if func_exists ${daemon}_start;then
                    status CUSTOM "${daemon}"
                    ${daemon}_start
                    if [[ $? -eq 0 ]];then
                        status STARTED "${daemon}"
                    else
                        status FAILURE "${daemon}"
                    fi
                fi
            else
                [[ -z "${BEGINNING_RESOLVING_DEPS}" ]] && [[ "${BEGINNING_RUNNER}" != rc.init ]] && status STARTED "${daemon}: already started"
            fi
        fi
    done
}

beginning_daemon_stop() {
    export BEGINNING_PHASE=stop
    local daemon
    for daemon in ${@};do
        if [[ " ${BEGINNING_SKIP_DEPS} " == *" ${daemon} "* ]];then
            continue
        fi
        beginning_daemon_load "${daemon}"
        if func_exists ${daemon}_virtual && ${daemon}_virtual;then
            beginning_daemon_provider stop ${daemon}; continue
        elif ! func_exists ${daemon}_exists || func_exists ${daemon}_exists && ! ${daemon}_exists;then
            continue
        fi
        BEGINNING_RESOLVING_DEPS=true
        d_list=(
            $(for d in $(beginning_daemon_list all);do
                beginning_daemon_load "$d" || true
                func_exists ${d}_depends && ${d}_depends |
                while read line;do
                    [[ " $line " == *" ${daemon} "* ]] && echo "${d}"
                done
            done)
        )
        depends=( )
        for dep in ${d_list[@]};do
            dname=${dep/:*}
            [[ " ${BEGINNING_SKIP_DEPS} " == *" ${dname} "* ]] && continue
            depends+=( "${dname}" )
        done
        if [[ " ${depends[@]} " != *" ${daemon} "* ]];then
            BEGINNING_SKIP_DEPS="${BEGINNING_SKIP_DEPS} ${daemon} " beginning_daemon_stop ${depends[@]}
        fi
        if func_exists ${daemon}_status;then
            if ${daemon}_status;then
                if func_exists ${daemon}_stop;then
                    status CUSTOM "${daemon}"
                    ${daemon}_stop
                    if [[ $? -eq 0 ]];then
                        status STOPPED "${daemon}"
                    else
                        status FAILURE "${daemon}"
                    fi
                fi
            else
                [[ -z "${BEGINNING_SKIP_DEPS}" ]] && status FAILURE "${daemon}: already stopped"
            fi
        fi
    done
}

beginning_daemon_do() {
    local daemon="$1" action="$2" require_started="${3:-true}"
    if func_exists ${daemon}_${action};then
        if [[ "${require_started,,}" == "true" ]];then
            if ! ${daemon}_status;then
                status FAILURE "${daemon}: must be running for \`${action}\`"
                return 1
            fi
        fi
        status CUSTOM "${daemon}${action:+: $action}"
        ${daemon}_${action}
        if [[ $? -eq 0 ]];then
            status SUCCESS "${daemon}"
        else
            status FAILURE "${daemon}"
            return 2
        fi
    fi
}

beginning_daemon_status() {
    local status="$1" d
    shift
    for d in $@;do
        if [[ -z $(beginning_daemon_list "${status}" "${d}") ]];then
            return 1
        else
            return 0
        fi
    done
}

# check if $1's contents is a pid which is exists
# if we are root, we use the bash builtin kill, and if not we use ps
# since kill will return 'operation not permitted' with a 1 errcode, which
# would be interpreted as the pid not existing
pidfileexists() {
    if [[ -r "${1}" ]];then
        local pid=$(<"${1}")
    else
        return 1
    fi
    if [[ $UID -eq 0 ]];then
        kill -0 "$pid" >/dev/null 2>&1; return $?
    else
        ps "$pid" >/dev/null 2>&1; return $?
    fi
}

pidfilekill() {
    [[ $# -gt 1 ]] && local sig="${1}" && shift
    if [[ -r "${@}" ]];then
        local pid=$(<"${1}")
    else
        return 1
    fi
    kill ${sig} "$pid" >/dev/null 2>&1
    return $?
}

killall5() {
    for pid in $(pgrep . | egrep -v "^(1|$$|$PPID)$");do
        disown "$pid" >/dev/null 2>&1 # hide Killed message from bash
        kill "${1:--15}" "$pid" >/dev/null 2>&1
    done
}

keeprunning() {
    local err
    local daemon="$1"
    shift
    while [[ "${err:-1}" -ne 0 ]];do
        local i=$(( ${i:-1} + 1 ))
        "$@"; local err=$?
        sleep 1
        if [[ "$i" -eq 10 ]];then
            break
        fi
    done
}

rchook() {
    if func_exists "$@";then
        status NOTHING "rchook: ${@}"
        if "$@";then
            status STARTED "rchook: ${@}"
        else
            status FAILURE "rchook: ${@}"
        fi
    fi
}
