#!/bin/bash
#
# Beginning - an init system that isn't smarter than you
#
# Copyright (c) 2015 Kylie McClain <somasis@exherbo.org>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

## Start
if [[ "$PPID" -ne 1 ]];then
    printf 'This script should only be ran from `begin`.\n' >&2
    exit 1
fi

LIBDIR="@@libdir@@"
BEGINNING_DIR="${LIBDIR}"/beginning

BEGINNING_CLEAN_DIRECTORIES=( /tmp /run )
BEGINNING_EXPECTED_DIRECTORIES=( /dev{,/pts,/shm} /proc /tmp "@@runstatedir@@"{,/beginning,/user,/lock} /sys )
if [[ -r "${BEGINNING_DIR}"/rc.functions ]];then
    . "${BEGINNING_DIR}"/rc.functions
else
    printf 'Could not find %s/rc.functions, going into emergency shell...\n' "${BEGINNING_DIR}"
    while true;do
        sulogin && exec "$0"
    done
fi

BEGINNING_RUNNER=rc.init

rchook pre_beginning

# We've read the configuration... time to start working.
dmesg -n 3

[[ "${RC_CLEAR_BOOT}" == true ]] && clear

printf "Beginning ${ANSI_COLOR}%s\e[0m...\n" "${PRETTY_NAME}"
[[ "${COPYRIGHT}" ]] && printf "\t%s\n" "${COPYRIGHT}${HOME_URL:+ - ${HOME_URL}}${SUPPORT_URL:+ - ${SUPPORT_URL}}"
printf "\t%s\n" "${BEGINNING_COPYRIGHT}" "Running $(uname -srvm)"
printf "\n"

# Disable echoing of keyboard input so everything looks pretty even if you're messing with keys
stty -F /dev/tty0 -echo

# Mount partitions required to do anything useful

for d in ${BEGINNING_EXPECTED_DIRECTORIES[@]};do
    mkdir -p "${d}" >/dev/null 2>&1
done
d=
mount -n -t proc        -o nodev,noexec,nosuid      proc    /proc    >/dev/null 2>&1
mount -n -t sysfs       -o nodev,noexec,nosuid      sys     /sys     >/dev/null 2>&1
mount -n -t devtmpfs    -o nosuid,mode=0755         dev     /dev     >/dev/null 2>&1
mount -n -t devpts      -o gid=5,mode=0620          devpts  /dev/pts >/dev/null 2>&1
mount -n -t tmpfs       -o nodev,nosuid,noexec      tmpfs   /tmp     >/dev/null 2>&1
mount -n -t tmpfs       -o nodev,nosuid,noexec      shm     /dev/shm >/dev/null 2>&1
mount -n -t tmpfs       -o rw,nosuid,nodev,mode=755 tmpfs   @@runstatedir@@     >/dev/null 2>&1

# Enable ctrl-alt-del rebooting
{ echo 0 > /proc/sys/kernel/ctrl-alt-del; } >/dev/null 2>&1 || ctrlaltdel soft >/dev/null 2>&1


# If we specify that the kernel should be verbose, we should tell dmesg
if [[ " $(</proc/cmdline) " == *" verbose "* ]];then
    dmesg -n 8
else
    dmesg -n "${LOG_LEVEL:-3}"
fi

printf "Remounting root as read-only...\n"
mount -o remount,ro /

# Set correct locations for /dev/std{in,out,err}
ln -sf /proc/self/fd/0  /dev/stdin
ln -sf /proc/self/fd/1  /dev/stdout
ln -sf /proc/self/fd/2  /dev/stderr
ln -sf /proc/self/fd    /dev/fd

rchook pre_fsck

printf "Checking filesystems...\n"
trap 'killall fsck' INT
fsck -A -T -a -t

trap - INT

rchook post_fsck
rchook pre_root_rw

printf "Remounting root as read-write...\n"
mount -o remount,rw /

printf "Creating runtime directories...\n"
for d in ${BEGINNING_CLEAN_DIRECTORIES[@]};do
    rm -rf "${d}"/* >/dev/null 2>&1
done
for d in ${BEGINNING_EXPECTED_DIRECTORIES[@]};do
    [[ -d "${d}" ]] || mkdir -p "${d}"
done

# Create a /run/user/$user directory for each user to prevent security issues
for u in $(cut -f1,3-4 -d ':' "@@sysconfdir@@"/passwd);do
    user=${u%%:*}
    gid=${u##*:}
    uid=${u%:*}; uid=${uid##*:}
    [[ -d "@@runstatedir@@"/user/"${uid}" ]] || mkdir "@@runstatedir@@"/user/"${uid}" >/dev/null
    # make sure directory is owned by user's primary group
    chown "${uid}:${gid}" "@@runstatedir@@"/user/"${uid}" >/dev/null

    # programs seem to default to /run/user/${USER} if XDG_RUNTIME_DIR unset
    ln -sf "@@runstatedir@@"/user/"${uid}" "@@runstatedir@@"/user/"${user}"
done

d=
u=
user=
gid=
uid=

rchook pre_fstab_mount
printf "Mounting filesystems in fstab...\n"
mount  -av | egrep -v '(already|ignored)'
swapon -av | egrep -v '(already|ignored)'

printf "Storing dmesg output to %s...\n" "@@localstatedir@@/log/dmesg.log"
dmesg > "@@localstatedir@@"/log/dmesg.log

# If the kernel wants us to restrict dmesg to just the root, do so with the log
if [[ -r /proc/sys/kernel/dmesg_restrict && $(</proc/sys/kernel/dmesg_restrict) == "1" ]];then
    chmod 0600 "@@localstatedir@@"/log/dmesg.log
else
    chmod 0644 "@@localstatedir@@"/log/dmesg.log
fi

[[ -w "@@runstatedir@@"/utmp || ! -f "@@runstatedir@@"/utmp ]] && : > "@@runstatedir@@"/utmp

rchook post_boot

if [[ " $(</proc/cmdline) " == *" single "* ]];then
    printf "Going into single user mode...\n"
    beginning_daemon_start ${CORE_DAEMONS_BEFORE[@]}
    beginning_daemon_start ${CORE_DAEMONS_AFTER[@]}
    emergency_shell
else
    beginning_daemon_start ${CORE_DAEMONS_BEFORE[@]}
    beginning_daemon_start ${DAEMONS[@]}
    beginning_daemon_start ${CORE_DAEMONS_AFTER[@]}
fi

# Restore keyboard input echoing
stty -F /dev/tty0 echo

wait
