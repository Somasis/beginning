#!/bin/bash
#
# Beginning - an init system that isn't smarter than you
#
# Copyright (c) 2015-2016 Kylie McClain <somasis@exherbo.org>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

BEGINNING_RUNNER=
BEGINNING_LIB="@@libdir@@"/beginning

if [[ -r "${BEGINNING_LIB}"/rc.functions ]];then
    . "${BEGINNING_LIB}"/rc.functions
else
    printf 'Could not find %s/rc.functions...\n' "${BEGINNING_LIB}"
    exit 2
fi

if [[ "${UID}" -ne 0 ]];then
    printf 'Must be root to use %s.\n' "${0##*/}"
    exit 4
fi

commands=(
    help
    list
    ls
    print-commands
    providers
    restart
    start
    status
    stop
    version
    $(declare -F | sed 's/.*declare -f //' | grep -- '^beginning_daemon_.*')
)

help() {
    echo "usage: ${0##*/} <command> [daemon]"
    echo
    echo "commands:"
    printf '    %s\n' ${commands[@]} | cut -d'|' -f2-
}

version() {
    echo "rc ${VERSION}"
}

rc_list() {
    [[ -n "$2" ]] || shift
    case "$2" in
        '')
            for dae in $(beginning_daemon_list started "${@}" 2>/dev/null);do
                status STARTED "${dae}"
            done
            for dae in $(beginning_daemon_list stopped "${@}" 2>/dev/null);do
                status STOPPED "${dae}"
            done
        ;;
        virtuals|all|started|stopped|existent|nonexistent|daemons)
            beginning_daemon_list "${2}" 2>/dev/null
        ;;
        *)
            help
        ;;
    esac
}

rc_status() {
    [[ $# -lt 2 ]] && help && return 3
    shift
    beginning_daemon_list all 2>/dev/null | for dae in "${@}";do
        grep -q "^${dae}$" || { help; return 5; }
    done

    for dae in $(beginning_daemon_list started "${@}" 2>/dev/null);do
        status STARTED "${dae}"
    done
    for dae in $(beginning_daemon_list stopped "${@}" 2>/dev/null);do
        status STOPPED "${dae}"
    done
}

rc_providers() {
    [[ $# -ne 2 ]] && help && return 2
    shift
    BEGINNING_PROVIDER_LIST_ONLY=true
    beginning_daemon_load "${1}" >/dev/null 2>&1
    providers=$(beginning_daemon_provider "" "$1" "installed")
    possible=$(beginning_daemon_provider "" "$1" "all")
    if [[ "${providers}" ]];then
        for p in ${providers};do
            echo "$p"
        done
    elif ! "${1}"_virtual >/dev/null 2>&1;then
        printf '%s: %s is not a virtual and therefore has no providers.\n' "${0##*/}" "$1" >&2
        return 20
    elif [[ -z "${possible}" ]];then
        printf '%s: %s does not have any providers, installed or nonexisttent.\n' "${0##*/}" "$1" >&2
    elif [[ -z "${providers}" ]];then
        printf '%s: %s does not have any providers installed. Possible providers: %s\n' "${0##*/}" "$1" "${possible}" >&2
        return 30
    fi
}

rc_action() {
    [[ "$#" -lt 2 ]] && return 1
    act="$1"
    shift
    for dae in ${@};do
        err=
        beginning_daemon_load "${dae}" >/dev/null 2>&1
        if func_exists ${dae}_exists && ! ${dae}_exists >/dev/null 2>&1;then
            err=5
        elif func_exists beginning_daemon_${act};then
            beginning_daemon_${act} "${dae}"
        elif func_exists ${dae}_${act};then
            beginning_daemon_do ${dae} ${act}
        else
            err=1
        fi
        err=${err:-$?}
    done
    if [[ "$err" -eq 5 ]];then
        printf "%s: %s isn't installed.\n" "${0##*/}" "${dae}" >&2
    elif [[ "$err" -eq 4 ]];then
        printf "%s: %s does not have a %s action.\n" "${0##*/}" "${dae}" "${act}" >&2
    elif [[ "$err" -eq 3 ]];then
        printf "%s: %s: script not found.\n" "${0##*/}" "${dae}" >&2
    fi
    return $err
}

rc_restart() {
    local d
    for d in $@;do
        beginning_daemon_status started "${d}" && rc_action stop "${d}"
        rc_action start "${d}"
    done
}

case "$1" in
    # non-daemon actions
    help)
        help
    ;;
    version)
        version
    ;;
    print-commands)
        printf '%s\n' ${commands[@]}
    ;;

    # internal functions
    beginning_daemon_*)
        [[ $# -lt 2 ]] && help && exit 2
        act="$1"
        shift
        "${act}" "$@"; exit $?
    ;;

    # informative
    list|ls|'')
        rc_list "$@"
    ;;
    status)
        rc_status "$@"
    ;;

    providers)
        rc_providers "$@"
    ;;

    # acting on daemons
    restart)
        shift
        rc_restart "$@"
    ;;
    *)
        rc_action "$@"
    ;;
esac

exit $?

